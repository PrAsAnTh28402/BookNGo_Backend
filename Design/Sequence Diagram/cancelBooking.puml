@startuml
actor User
participant "BookingController" as BC
participant "verifyToken Middleware" as VT
participant "BookingModel" as BM
database "Database" as DB

' Step 1: User sends DELETE request
User -> BC : DELETE /api/bookings/:id with Authorization header

' Step 2: Token verification
BC -> VT : verifyToken(req.headers.authorization)
VT --> BC : valid token & user_id
alt Token missing or invalid
    VT --> User : 401 Unauthorized
end

' Step 3: Fetch booking from DB
BC -> BM : fetchBookingById(booking_id)
BM -> DB : SELECT * FROM bookings WHERE booking_id = :id
DB --> BM : booking record (or empty)
BM --> BC : return booking data

' Step 4: Check if booking exists
alt Booking not found
    BC --> User : 404 Booking not found
else Booking exists
    ' Step 5: Check authorization (user owns it OR admin)
    BC -> BC : if req.user.user_id === booking.user_id OR req.user.role === 'admin'
    alt Not authorized
        BC --> User : 403 Forbidden
    else Authorized
        ' Step 6: Soft delete â€“ update status
        BC -> BM : updateBookingStatus(booking_id, 'cancelled')
        BM -> DB : UPDATE bookings SET status='cancelled', updated_at=NOW() WHERE booking_id=:id
        DB --> BM : update success
        BM --> BC : updated booking data

        ' Step 7: Respond to client
        BC --> User : 200 OK (Booking cancelled successfully)
    end
end

' Step 8: Handle DB/server errors
alt DB/server error
    BC --> User : 500 Internal Server Error
end
@enduml
