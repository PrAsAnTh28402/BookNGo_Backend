@startuml Create Events
class EventEntity {
  + event_id : INTEGER
  + title : VARCHAR
  + location : VARCHAR
  + event_date : DATE
  + time : VARCHAR
  + description : TEXT
  + category_id : INTEGER
  + image_url : TEXT
  + capacity : INTEGER
  + available_seats : INTEGER
  + price : NUMERIC
  + is_active : BOOLEAN
  + created_at : TIMESTAMP
  + updated_at : TIMESTAMP
  + created_by : INTEGER
  + updated_by : INTEGER
}

class EventDTO {
  + title : VARCHAR
  + location : VARCHAR
  + event_date : DATE
  + time : VARCHAR
  + description : TEXT
  + category_name : VARCHAR
  + image_url : TEXT
  + capacity : INTEGER
  + available_seats : INTEGER
  + price : NUMERIC
  + is_active : BOOLEAN
}

class EventModel {
  + createEvent(data : EventEntity): EventEntity / error
}

class EventService {
  + createEventService(eventData : EventEntity): EventDTO / error
}

class EventController {
  + createEvent(req, res): Response
}

class AuthMiddleware {
  + verifyToken(req, res, next): void
  + checkAdminRole(req, res, next): void
}

EventController --> EventService : calls createEventService(eventData)
EventService --> EventModel : calls createEvent(eventData)
EventService --> EventDTO : maps EventEntity to EventDTO
EventController --> AuthMiddleware : uses verifyToken & checkAdminRole before execution
@enduml
